        -:    0:Source:AlgorithmFactory.cpp
        -:    1:#include <memory>
        -:    2:#include "AlgorithmFactory.h"
        -:    3:#include "MSTAlgorithm.h"
        -:    4:#include "SCCAlgorithm.h"
        -:    5:#include "MaxFlowAlgorithm.h"
        -:    6:#include "HamiltonianAlgorithm.h"
        -:    7:#include <algorithm>
        -:    8:#include <stdexcept>
        -:    9:
function _ZN16AlgorithmFactory6createERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 16 returned 100% blocks executed 67%
       16:   10:std::unique_ptr<GraphAlgorithm> AlgorithmFactory::create(const std::string& raw) {
       16:   11:    std::string name = raw;
call    0 returned 16
branch  1 taken 16 (fallthrough)
branch  2 taken 0 (throw)
        -:   12:    
        -:   13:    // normalize to lowercase
function _ZZN16AlgorithmFactory6createERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlhE_clEh called 84 returned 100% blocks executed 100%
      100:   14:    std::transform(name.begin(), name.end(), name.begin(), [](unsigned char c){ return std::tolower(c); });
call    0 returned 16
call    1 returned 16
call    2 returned 16
call    3 returned 16
        -:   15:
       16:   16:    if (name == "mst")       return std::make_unique<MSTAlgorithm>();
call    0 returned 16
branch  1 taken 16 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 4 (fallthrough)
branch  4 taken 12
call    5 returned 4
branch  6 taken 4 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 4
call    9 returned 4
       12:   17:    if (name == "scc")       return std::make_unique<SCCAlgorithm>();
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 4 (fallthrough)
branch  4 taken 8
call    5 returned 4
branch  6 taken 4 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 4
call    9 returned 4
        8:   18:    if (name == "maxflow")   return std::make_unique<MaxFlowAlgorithm>();
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 4 (fallthrough)
branch  4 taken 4
call    5 returned 4
branch  6 taken 4 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 4
call    9 returned 4
        4:   19:    if (name == "hamilton")  return std::make_unique<HamiltonianAlgorithm>();
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 4 (fallthrough)
branch  4 taken 0
call    5 returned 4
branch  6 taken 4 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 4
call    9 returned 4
        -:   20:
    #####:   21:    throw std::invalid_argument("Unknown algorithm: " + raw);
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
       16:   22:}
call    0 returned 16
call    1 never executed
