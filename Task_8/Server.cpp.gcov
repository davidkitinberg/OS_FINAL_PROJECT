        -:    0:Source:Server.cpp
        -:    1:#include <iostream>
        -:    2:#include <thread>
        -:    3:#include <vector>
        -:    4:#include <mutex>
        -:    5:#include <condition_variable>
        -:    6:#include <netinet/in.h>
        -:    7:#include <unistd.h>
        -:    8:#include <atomic>
        -:    9:#include <cstring>
        -:   10:#include <cstdint>
        -:   11:#include <algorithm>
        -:   12:#include <fcntl.h>
        -:   13:#include <errno.h>
        -:   14:#include <chrono>
        -:   15:#include <sys/socket.h>
        -:   16:#include "Graph.h"
        -:   17:#include "AlgorithmFactory.h"
        -:   18:
        -:   19:constexpr int PORT = 12345;
        -:   20:constexpr int THREAD_COUNT = 4;
        -:   21:
        -:   22:// Leader-Follower coordination
        -:   23:std::mutex leader_mutex;
        -:   24:std::condition_variable leader_cv;
        -:   25:bool leader_active = false;
        -:   26:
        -:   27:// Shutdown helper flags
        -:   28:std::atomic<bool> g_stop{false}; // Global atomic flag set to true when the server is shutting down.
        -:   29:int g_listen_fd = -1; // The listening socket file descriptor. We close this during shutdown to immediately unblock any thread stuck in accept().
        -:   30:std::mutex clients_mtx; // Protects the 'clients' container below. Always lock this mutex before reading/modifying 'clients'.
        -:   31:std::vector<int> clients; // List of currently active client socket FDs
        -:   32:
        -:   33:
        -:   34:// Helper functions for I/O
function _ZL7readAlliPvm called 150 returned 100% blocks executed 100%
      150:   35:static bool readAll(int fd, void* buf, size_t n) {
      150:   36:    auto* p = static_cast<uint8_t*>(buf);
      298:   37:    while (n) {
branch  0 taken 150
branch  1 taken 148 (fallthrough)
      150:   38:        ssize_t r = ::read(fd, p, n);
call    0 returned 150
      150:   39:        if (r <= 0) return false;
branch  0 taken 2 (fallthrough)
branch  1 taken 148
      148:   40:        p += r; n -= static_cast<size_t>(r);
        -:   41:    }
      148:   42:    return true;
        -:   43:}
function _ZL8writeAlliPKvm called 24 returned 100% blocks executed 88%
       24:   44:static bool writeAll(int fd, const void* buf, size_t n) {
       24:   45:    auto* p = static_cast<const uint8_t*>(buf);
       48:   46:    while (n) {
branch  0 taken 24
branch  1 taken 24 (fallthrough)
       24:   47:        ssize_t w = ::write(fd, p, n);
call    0 returned 24
      24*:   48:        if (w <= 0) return false;
branch  0 taken 0 (fallthrough)
branch  1 taken 24
       24:   49:        p += w; n -= static_cast<size_t>(w);
        -:   50:    }
       24:   51:    return true;
        -:   52:}
        -:   53:
        -:   54:
        -:   55:// Helper function for client handling
function _ZL9addClienti called 2 returned 100% blocks executed 71%
        2:   56:static void addClient(int fd) {
        2:   57:    std::lock_guard<std::mutex> g(clients_mtx);
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   58:    clients.push_back(fd);
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   59:}
call    0 returned 2
call    1 never executed
function _ZL9delClienti called 2 returned 100% blocks executed 65%
        2:   60:static void delClient(int fd) {
        2:   61:    std::lock_guard<std::mutex> g(clients_mtx);
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   62:    clients.erase(std::remove(clients.begin(), clients.end(), fd), clients.end());
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 2
call    8 returned 2
branch  9 taken 2 (fallthrough)
branch 10 taken 0 (throw)
        2:   63:}
call    0 returned 2
call    1 never executed
        -:   64:
        -:   65:
        -:   66:// Handles a single client request
function _Z12handleClienti called 2 returned 100% blocks executed 66%
        2:   67:void handleClient(int sock) {
        2:   68:    addClient(sock);
call    0 returned 2
        -:   69:
        -:   70:    while (true) {
        -:   71:        // Read number of vertices and edges from client
        -:   72:        int32_t v_net, e_net;
       11:   73:        if (!readAll(sock, &v_net, 4) || !readAll(sock, &e_net, 4)) break;
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 9 (fallthrough)
branch  4 taken 2
call    5 returned 9
branch  6 taken 9 (fallthrough)
branch  7 taken 0 (throw)
branch  8 taken 0 (fallthrough)
branch  9 taken 9
branch 10 taken 2 (fallthrough)
branch 11 taken 9
        9:   74:        int V = ntohl(v_net), E = ntohl(e_net);
        -:   75:
        -:   76:        // Construct graph from edge list
        9:   77:        Graph g(V);
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
       65:   78:        for (int i = 0; i < E; ++i) {
branch  0 taken 56
branch  1 taken 9 (fallthrough)
        -:   79:            int32_t u_net, v2_net;
      56*:   80:            if (!readAll(sock, &u_net, 4) || !readAll(sock, &v2_net, 4)) {
call    0 returned 56
branch  1 taken 56 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 56 (fallthrough)
branch  4 taken 0
call    5 returned 56
branch  6 taken 56 (fallthrough)
branch  7 taken 0 (throw)
branch  8 taken 0 (fallthrough)
branch  9 taken 56
branch 10 taken 0 (fallthrough)
branch 11 taken 56
    #####:   81:                shutdown(sock, SHUT_RDWR); 
call    0 never executed
    #####:   82:                close(sock); // Client disconnected mid-read
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   83:                delClient(sock); return;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:   84:            }
       56:   85:            g.addEdge(ntohl(u_net), ntohl(v2_net));
call    0 returned 56
branch  1 taken 56 (fallthrough)
branch  2 taken 0 (throw)
        -:   86:        }
        -:   87:
        -:   88:        // Read algorithm name (length-prefixed string)
        -:   89:        int32_t len_net;
       9*:   90:        if (!readAll(sock, &len_net, 4)) break;
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 0 (fallthrough)
branch  4 taken 9
        9:   91:        std::string algo(ntohl(len_net), '\0');
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
       9*:   92:        if (!readAll(sock, algo.data(), algo.size())) break;
call    0 returned 9
call    1 returned 9
call    2 returned 9
branch  3 taken 9 (fallthrough)
branch  4 taken 0 (throw)
branch  5 taken 0 (fallthrough)
branch  6 taken 9
        -:   93:
        -:   94:
       9*:   95:        if (algo == "quit") break; // Exit loop if client sends "quit"
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 0 (fallthrough)
branch  4 taken 9
        -:   96:
        -:   97:        // Run all 4 algorithms if "all" is requested
        9:   98:        if (algo == "all") 
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 1 (fallthrough)
branch  4 taken 8
        -:   99:        {
        9:  100:            for (std::string name : {"mst","scc","maxflow","hamilton"}) 
call    0 returned 1
call    1 returned 1
call    2 returned 4
branch  3 taken 4 (fallthrough)
branch  4 taken 0 (throw)
branch  5 taken 4
branch  6 taken 1 (fallthrough)
        -:  101:            {
        4:  102:                auto alg = AlgorithmFactory::create(name);
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:  103:                std::string res = alg->run(g);
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4:  104:                int32_t n = htonl(static_cast<int32_t>(res.size()));
call    0 returned 4
       4*:  105:                if (!writeAll(sock,&n,4)||!writeAll(sock,res.data(),res.size())) {
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 4 (fallthrough)
branch  4 taken 0
call    5 returned 4
call    6 returned 4
call    7 returned 4
branch  8 taken 4 (fallthrough)
branch  9 taken 0 (throw)
branch 10 taken 0 (fallthrough)
branch 11 taken 4
branch 12 taken 0 (fallthrough)
branch 13 taken 4
    #####:  106:                    shutdown(sock, SHUT_RDWR); // Close socket from both ends
call    0 never executed
    #####:  107:                    close(sock); // Client disconnected mid-write
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  108:                    delClient(sock); // Remove active client from the List of active clients
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  109:                    return;
        -:  110:                }
        4:  111:            }
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0
call    6 returned 4
branch  7 taken 4 (fallthrough)
branch  8 taken 0
call    9 never executed
call   10 never executed
call   11 never executed
        -:  112:        } 
        -:  113:        else // Run specific requested algorithm
        -:  114:        {
        8:  115:            auto alg = AlgorithmFactory::create(algo);
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:  116:            std::string res = alg->run(g);
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
        8:  117:            int32_t n = htonl(static_cast<int32_t>(res.size()));
call    0 returned 8
       8*:  118:            if (!writeAll(sock,&n,4)||!writeAll(sock,res.data(),res.size())){
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 8 (fallthrough)
branch  4 taken 0
call    5 returned 8
call    6 returned 8
call    7 returned 8
branch  8 taken 8 (fallthrough)
branch  9 taken 0 (throw)
branch 10 taken 0 (fallthrough)
branch 11 taken 8
branch 12 taken 0 (fallthrough)
branch 13 taken 8
    #####:  119:                shutdown(sock, SHUT_RDWR); // Close socket from both ends
call    0 never executed
    #####:  120:                close(sock); // Client disconnected mid-write
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  121:                delClient(sock); // Remove active client from the List of active clients
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  122:                return;
        -:  123:            }
        8:  124:        }
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0
call    3 returned 8
branch  4 taken 8 (fallthrough)
branch  5 taken 0
call    6 never executed
call    7 never executed
       18:  125:    }
call    0 returned 9
branch  1 taken 9
branch  2 taken 0
branch  3 taken 0
call    4 returned 9
branch  5 taken 9
branch  6 taken 0
branch  7 taken 0
call    8 never executed
call    9 never executed
        -:  126:
        -:  127:    // Clean up when client disconnects or sends "quit"
        2:  128:    shutdown(sock, SHUT_RDWR); // Close socket from both ends
call    0 returned 2
        2:  129:    close(sock); // Close socket
call    0 returned 2
        2:  130:    delClient(sock); // Remove active client from the List of active clients
call    0 returned 2
        2:  131:    std::cout << "[Server] Client disconnected\n";
call    0 returned 2
        -:  132:}
        -:  133:
        -:  134:// Leader-Follower thread logic
function _Z9lf_workeri called 4 returned 100% blocks executed 74%
        4:  135:void lf_worker(int listen_fd) {
        6:  136:    while (!g_stop.load()) 
call    0 returned 6
branch  1 taken 6
branch  2 taken 0 (fallthrough)
        -:  137:    {
        -:  138:        // Wait to become leader
        -:  139:        {   
        6:  140:            std::unique_lock<std::mutex> lk(leader_mutex);
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
function _ZZ9lf_workeriENKUlvE_clEv called 11 returned 100% blocks executed 100%
       17:  141:            leader_cv.wait(lk,[]{return !leader_active||g_stop.load();}); // Wait until no leader is active
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 8 (fallthrough)
branch  4 taken 3
call    5 returned 8
branch  6 taken 3 (fallthrough)
branch  7 taken 5
        6:  142:            if (g_stop.load()) break; // Shut down atomic flag
call    0 returned 6
branch  1 taken 3 (fallthrough)
branch  2 taken 3
        3:  143:            leader_active = true; // This thread becomes the Leader
        6:  144:        }
call    0 returned 6
branch  1 taken 3 (fallthrough)
branch  2 taken 3
call    3 never executed
        -:  145:
        -:  146:        // Accept connection
        3:  147:        int client_fd = accept(listen_fd,nullptr,nullptr);
call    0 returned 3
        3:  148:        if (client_fd < 0) 
branch  0 taken 1
branch  1 taken 2
        -:  149:        {
        1:  150:            if (g_stop.load()) break;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
    #####:  151:                perror("accept");
call    0 never executed
        -:  152:            { 
    #####:  153:                std::lock_guard<std::mutex> g(leader_mutex);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  154:                leader_active = false; // Demote leader
    #####:  155:                leader_cv.notify_one(); // Wake up one waiting thread to become the next Leader
call    0 never executed
    #####:  156:            }
call    0 never executed
    #####:  157:            continue; // Try again on failure
    #####:  158:        }
        -:  159:
        -:  160:        // Promote new leader
        -:  161:        // Release leadership so another thread can call accept()
        -:  162:        {   
        2:  163:            std::lock_guard<std::mutex> g(leader_mutex);
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  164:            leader_active = false; // Demote leader
        2:  165:            leader_cv.notify_one(); // Wake up one waiting thread to become the next Leader
call    0 returned 2
        2:  166:        }
call    0 returned 2
        -:  167:
        2:  168:        handleClient(client_fd); // Handle request as worker (this thread was the leader)
call    0 returned 2
        -:  169:    }
        4:  170:}
        -:  171:
        -:  172:// Watch STDIN for “exit”
function _Z12stdinWatcherv called 1 returned 100% blocks executed 70%
        1:  173:void stdinWatcher() {
        -:  174:    // Set STDIN to non-blocking mode
        1:  175:    int fl = fcntl(STDIN_FILENO,F_GETFL,0);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  176:    fcntl(STDIN_FILENO,F_SETFL,fl|O_NONBLOCK);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  177:
        1:  178:    std::string buf; 
call    0 returned 1
        -:  179:    char tmp[128];
        -:  180:
        -:  181:    // Keep checking STDIN unless shutdown was triggered externally
     1937:  182:    while (!g_stop.load()) 
call    0 returned 1937
branch  1 taken 1937
branch  2 taken 0 (fallthrough)
        -:  183:    {
     1937:  184:        ssize_t n = read(STDIN_FILENO,tmp,sizeof(tmp));
call    0 returned 1937
branch  1 taken 1937 (fallthrough)
branch  2 taken 0 (throw)
        -:  185:
     1937:  186:        if (n > 0) 
branch  0 taken 2 (fallthrough)
branch  1 taken 1935
        -:  187:        {
        2:  188:            buf.append(tmp,n); // Append what was read to a buffer
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:  189:            size_t pos;
        -:  190:            // Extract lines one-by-one (if multiple lines were entered)
        3:  191:            while ((pos=buf.find('\n'))!=std::string::npos) 
call    0 returned 3
branch  1 taken 2
branch  2 taken 1
        -:  192:            {
        2:  193:                std::string line=buf.substr(0,pos); buf.erase(0,pos+1);
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        -:  194:                // If the user types "exit", initiate graceful shutdown
        2:  195:                if (line=="exit") 
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        -:  196:                {
        1:  197:                    std::cout<<"[Server] Shutting down...\n";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  198:                    g_stop = true;
call    0 returned 1
        -:  199:
        -:  200:                    // Shutdown the listening socket to unblock accept()
        1:  201:                    if (g_listen_fd!=-1) 
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  202:                    { 
        1:  203:                        shutdown(g_listen_fd,SHUT_RDWR); 
call    0 returned 1
        1:  204:                        close(g_listen_fd); 
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  205:                    }
        -:  206:
        -:  207:                    // Shutdown and close all active client sockets
        -:  208:                    { 
        1:  209:                        std::lock_guard<std::mutex> g(clients_mtx);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  210:                        for(int fd:clients) { 
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
call    4 returned 1
branch  5 taken 0
branch  6 taken 1 (fallthrough)
    #####:  211:                            shutdown(fd,SHUT_RDWR); 
call    0 never executed
    #####:  212:                            close(fd);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  213:                        } 
        1:  214:                    }
call    0 returned 1
call    1 never executed
        -:  215:
        -:  216:                    // Wake up all LF threads that may be waiting on condition variable
        -:  217:                    { 
        1:  218:                        std::lock_guard<std::mutex> g(leader_mutex);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  219:                        leader_cv.notify_all(); // wake LF sleepers
call    0 returned 1
        1:  220:                    }        
call    0 returned 1
        1:  221:                    return; // Exit the watcher thread
        -:  222:                }
        2:  223:            }
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
call    3 never executed
        -:  224:        } 
        -:  225:        // Handle EOF or fatal read error
    1935*:  226:        else if (n==0||(n==-1&&errno!=EAGAIN&&errno!=EWOULDBLOCK)) {
branch  0 taken 1935 (fallthrough)
branch  1 taken 0
branch  2 taken 1935 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 1935
branch  6 never executed (fallthrough)
branch  7 never executed
    #####:  227:            return;
        -:  228:        }
        -:  229:        // Prevent busy waiting: sleep briefly before checking STDIN again
     1936:  230:        std::this_thread::sleep_for(std::chrono::milliseconds(50));
call    0 returned 1936
call    1 returned 1936
branch  2 taken 1936 (fallthrough)
branch  3 taken 0 (throw)
        -:  231:    }
       1*:  232:}
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
call    3 never executed
        -:  233:
function main called 1 returned 100% blocks executed 73%
        1:  234:int main() {
        -:  235:
        -:  236:    // Create TCP socket for listening
        1:  237:    int listen_fd = socket(AF_INET,SOCK_STREAM,0);
call    0 returned 1
        1:  238:    if (listen_fd<0) { 
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  239:        perror("socket"); return 1; 
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  240:    }
        -:  241:
        1:  242:    g_listen_fd = listen_fd;
        -:  243:
        -:  244:    // Setup server address struct
        1:  245:    sockaddr_in addr{}; 
        1:  246:    addr.sin_family=AF_INET;
        1:  247:    addr.sin_port=htons(PORT); // Bind to specified port
        1:  248:    addr.sin_addr.s_addr=INADDR_ANY; // Accept connections on any interface
        -:  249:    
        -:  250:    // Allow immediate reuse of the port after the server terminates
        1:  251:    int opt=1; 
        1:  252:    setsockopt(listen_fd,SOL_SOCKET,SO_REUSEADDR,&opt,sizeof(opt));
call    0 returned 1
        -:  253:
        -:  254:    // Bind the socket to the address and port
        1:  255:    if (bind(listen_fd,reinterpret_cast<sockaddr*>(&addr),sizeof(addr))<0){
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  256:        perror("bind"); return 1;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  257:    }
        -:  258:
        -:  259:    // Start listening for incoming connections
       1*:  260:    if (listen(listen_fd,10)<0){ perror("listen"); return 1; }
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -:  261:
        1:  262:    std::cout<<"[Server] Listening on port "<<PORT<<std::endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        -:  263:
        -:  264:    // Create new thead only for STDIN
        1:  265:    std::thread stdin_thread(stdinWatcher);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  266:
        -:  267:    // Create and launch a fixed number of LF worker threads
        1:  268:    std::vector<std::thread> workers;
call    0 returned 1
        5:  269:    for(int i=0;i<THREAD_COUNT;++i) 
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        -:  270:    {
        4:  271:        workers.emplace_back(lf_worker,listen_fd); // Each thread runs the LF worker logic
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        -:  272:    }
        -:  273:        
        5:  274:    for(auto& t:workers) t.join();
call    0 returned 1
call    1 returned 1
call    2 returned 4
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 4
call    7 returned 5
branch  8 taken 4
branch  9 taken 1 (fallthrough)
        -:  275:
        -:  276:
        1:  277:    stdin_thread.join();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  278:
        1:  279:    std::cout<<"[Server] Shutdown complete\n";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  280:    return 0;
        1:  281:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
