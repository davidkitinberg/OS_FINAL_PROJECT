        -:    0:Source:Graph.cpp
        -:    1:#include "Graph.h"
        -:    2:#include <stdexcept>
        -:    3:
        -:    4:// Constructor
function _ZN5GraphC2Ei called 10 returned 100% blocks executed 44%
       20:    5:Graph::Graph(int n) : numVertices(n), adjacencyList(n) {
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
call    3 never executed
       10:    6:    if (n < 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    #####:    7:        throw std::invalid_argument("Number of vertices must be non-negative.");
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
call    5 never executed
        -:    8:    }
       10:    9:}
call    0 never executed
        -:   10:
        -:   11:// Vertex bounds checker
function _ZNK5Graph14validateVertexEi called 130 returned 100% blocks executed 50%
      130:   12:void Graph::validateVertex(int v) const {
      130:   13:    if (v < 0 || v >= numVertices) {
branch  0 taken 130 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 130
    #####:   14:        throw std::out_of_range("Vertex index out of bounds.");
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
call    5 never executed
        -:   15:    }
      130:   16:}
        -:   17:
        -:   18:// Get number of vertices
function _ZNK5Graph1VEv called 16 returned 100% blocks executed 100%
       16:   19:int Graph::V() const {
       16:   20:    return numVertices;
        -:   21:}
        -:   22:
        -:   23:// Add an undirected edge
function _ZN5Graph7addEdgeEii called 39 returned 100% blocks executed 69%
       39:   24:void Graph::addEdge(int u, int v) {
       39:   25:    validateVertex(u);
call    0 returned 39
       39:   26:    validateVertex(v);
call    0 returned 39
       39:   27:    if (u == v) {
branch  0 taken 0 (fallthrough)
branch  1 taken 39
    #####:   28:        throw std::invalid_argument("Self-loops are not supported in this version.");
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
call    5 never executed
        -:   29:    }
       39:   30:    adjacencyList[u].push_back(v);
call    0 returned 39
call    1 returned 39
       39:   31:    adjacencyList[v].push_back(u);
call    0 returned 39
call    1 returned 39
       39:   32:}
        -:   33:
        -:   34:// Add a directed edge
function _ZN5Graph15addDirectedEdgeEii called 26 returned 100% blocks executed 100%
       26:   35:void Graph::addDirectedEdge(int u, int v) {
       26:   36:    validateVertex(u);
call    0 returned 26
       26:   37:    validateVertex(v);
call    0 returned 26
       26:   38:    adjacencyList[u].push_back(v);
call    0 returned 26
call    1 returned 26
       26:   39:}
        -:   40:
        -:   41:// Return raw pointer for compatibility with `vector<int> adj[]`
function _ZN5Graph3rawEv called 0 returned 0% blocks executed 0%
    #####:   42:std::vector<int>* Graph::raw() {
    #####:   43:    return adjacencyList.data();
call    0 never executed
        -:   44:}
        -:   45:
function _ZNK5Graph3rawEv called 12 returned 100% blocks executed 100%
       12:   46:const std::vector<int>* Graph::raw() const {
       12:   47:    return adjacencyList.data();
call    0 returned 12
        -:   48:}
        -:   49:
        -:   50:// Get degree of a vertex
function _ZNK5Graph6degreeEi called 0 returned 0% blocks executed 0%
    #####:   51:int Graph::degree(int v) const {
    #####:   52:    validateVertex(v);
call    0 never executed
    #####:   53:    return static_cast<int>(adjacencyList[v].size());
call    0 never executed
call    1 never executed
        -:   54:}
        -:   55:
        -:   56:// Remove all edges
function _ZN5Graph5clearEv called 0 returned 0% blocks executed 0%
    #####:   57:void Graph::clear() {
    #####:   58:    for (auto& vec : adjacencyList) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
    #####:   59:        vec.clear();
call    0 never executed
        -:   60:    }
    #####:   61:}
