        -:    0:Source:AlgorithmFactory.cpp
        -:    1:#include <memory>
        -:    2:#include "AlgorithmFactory.h"
        -:    3:#include "EulerAlgorithm.h"
        -:    4:#include "MSTAlgorithm.h"
        -:    5:#include "SCCAlgorithm.h"
        -:    6:#include "MaxFlowAlgorithm.h"
        -:    7:#include "HamiltonianAlgorithm.h"
        -:    8:#include <algorithm>
        -:    9:#include <stdexcept>
        -:   10:
function _ZN16AlgorithmFactory6createERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 10 returned 100% blocks executed 70%
       10:   11:std::unique_ptr<GraphAlgorithm> AlgorithmFactory::create(const std::string& raw) {
       10:   12:    std::string name = raw;
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
        -:   13:    
        -:   14:    // normalize to lowercase
function _ZZN16AlgorithmFactory6createERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlhE_clEh called 52 returned 100% blocks executed 100%
       62:   15:    std::transform(name.begin(), name.end(), name.begin(), [](unsigned char c){ return std::tolower(c); });
call    0 returned 10
call    1 returned 10
call    2 returned 10
call    3 returned 10
        -:   16:
       10:   17:    if (name == "euler")     return std::make_unique<EulerAlgorithm>();
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 2 (fallthrough)
branch  4 taken 8
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 2
call    9 returned 2
        8:   18:    if (name == "mst")       return std::make_unique<MSTAlgorithm>();
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 2 (fallthrough)
branch  4 taken 6
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 2
call    9 returned 2
        6:   19:    if (name == "scc")       return std::make_unique<SCCAlgorithm>();
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 2 (fallthrough)
branch  4 taken 4
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 2
call    9 returned 2
        4:   20:    if (name == "maxflow")   return std::make_unique<MaxFlowAlgorithm>();
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 2 (fallthrough)
branch  4 taken 2
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 2
call    9 returned 2
        2:   21:    if (name == "hamilton")  return std::make_unique<HamiltonianAlgorithm>();
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 2 (fallthrough)
branch  4 taken 0
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 2
call    9 returned 2
        -:   22:
    #####:   23:    throw std::invalid_argument("Unknown algorithm: " + raw);
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
       10:   24:}
call    0 returned 10
call    1 never executed
